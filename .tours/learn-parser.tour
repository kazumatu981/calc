{
    "$schema": "https://aka.ms/codetour-schema",
    "title": "構文解析(parser)の理解",
    "steps": [
        {
            "file": "src/lib/parser/index.ts",
            "description": "## 構文解析を理解しよう\r\n\r\n構文解析は、字句解析で得た字句(Token)の配列をもとに、数式の構造をツリー状のデータ構造を作成します。\r\nそれでは、その構造を理解しましょう。",
            "line": 42
        },
        {
            "file": "src/lib/parser/parser-node/parser-node.ts",
            "description": "## 構文解析のツリーノード\r\n\r\n構文解析を木構造に解析するので、木構造の端点(ノード)を表すクラスがこのディレクトリにある `*Node`というクラスです。\r\n\r\n| クラス名 | 説明 | 子供の数 |\r\n| --- | --- | --- |\r\n| SingleNode | 単項演算子のノード | 0 |\r\n| BinaryNode | 二項演算子のノード | 2 |\r\n| ParenNode | 括弧のノード | 1 |\r\n\r\nこれらのクラスの基底クラスになっているクラスが、この抽象クラス(それ自体は `new` できないクラス)である `ParserNode` です。\r\n\r\n### 主要プロパティ\r\n\r\n共通的なプロパティは `nodeType` と `tokens` です。\r\n\r\n* `nodeType`: ノードの型\r\n* `tokens`: 使われた字句の配列\r\n\r\n\r\n",
            "line": 10
        },
        {
            "file": "src/lib/parser/parser-node/parser-node.ts",
            "description": "### ノードの型を決める `nodeType`\r\n\r\n`nodeType` はノードの型を表します。\r\n\r\n| nodeType | 型 |\r\n| --- | --- |\r\n| single | `SingleNode` |\r\n| binary | `BinaryNode` |\r\n| paren | `ParenNode` |",
            "line": 11
        },
        {
            "file": "src/lib/parser/parser-node/single-node.ts",
            "description": "## SingleNode\r\n\r\n単項ノードです。\r\n\r\n単項ノードとは、数字のみのノードです。\r\nこれ以上子供を持たない末端のノードとして使われます。",
            "line": 7
        },
        {
            "file": "src/lib/parser/parser-node/binary-node.ts",
            "description": "## BinaryNode\r\n\r\n演算子のノードです。\r\n\r\n演算子と、右側、左側を表すオブジェクトです。",
            "line": 7
        },
        {
            "file": "src/lib/parser/parser-node/paren-node.ts",
            "description": "## ParenNode\r\n\r\n括弧のノード\r\n\r\n括弧を表すノードです。\r\n`childRoot` から連なるノードは括弧の中身を表します。",
            "line": 7
        },
        {
            "file": "src/lib/parser/parser.ts",
            "description": "## 構文解析メイン処理\r\n\r\n構文解析のメイン処理を見てみましょう。\r\n\r\n字句の列の最後まで字句を取り出して、構文のツリー状の構造を作成していきます。\r\n\r\n* 字句の列から演算子を表す字句とその次のノードを読み取ります( `_readNextOperatorAndNode()` )。\r\n* 読み取ったのち、構文ツリーにその演算子とノードをつなぎ合わせます( `_connectTwoNodes()` )。",
            "line": 48
        },
        {
            "file": "src/lib/parser/parser.ts",
            "description": "### 次の演算子とノードを読み取る\r\n\r\n* まずは演算子を読み取ります(`_readAsOperatorToken()`)\r\n* 次は、字句が数字かマイナス符号かを見て、その通りであれば単項ノードとして読み取ります。(`_readAsSingleNode()`)\r\n* もし、左括弧なら、括弧ノードとして読み取ります。(`_readAsParenNode()`)\r\n* 読み取った演算子とノードを返します。\r\n",
            "line": 115
        },
        {
            "file": "src/lib/parser/parser-node/parser-node.ts",
            "description": "## 二つのノードをつなぎ合わせる\r\n\r\n* 左のノード(`node1`)とが空(`undefined`)なら右のノード(`node2`)をそのまま返却します。\r\n* 左のノードが空でなければ、左のノードに演算子と右のノードをつなぎます。\r\n* つなぎ方は左のノードの型によって異なります。\r\n\r\nでは、次は、左のノードの型の違いによるつなぎ方の違いを見てみます。",
            "line": 41
        },
        {
            "file": "src/lib/parser/parser-node/parser-node.ts",
            "description": "## `SingleNode` や `ParenNode` の場合\r\n\r\nこの場合は、単純に演算子ノード(BinaryNode)を作って、自身を左の項、つなぐノードを右の項としてつなぎます。",
            "line": 29
        },
        {
            "file": "src/lib/parser/parser-node/binary-node.ts",
            "description": "## BinaryNodeの場合\r\n\r\n演算子(`operatorToken`)によってつなぎ方が異なります。\r\n\r\n* 演算子が`+`や`-`のように優先度の低い演算子の場合は、自身を左、つなぐノードを右にして新しい BinaryNode を生成します。\r\n* 優先度の高いノードの場合は、右の子とつなぐノードを使って、BinaryNodeを生成し、新しく作ったノードを右手と入れ替えます。\r\n",
            "line": 34
        },
        {
            "file": "src/lib/parser/parser.ts",
            "description": "## 生成したツリーの返却\r\n\r\nこのようにして生成したツリーのルートを返却します。",
            "line": 67
        }
    ]
}
